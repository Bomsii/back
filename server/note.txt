// Initialize your project and link it with npm
// 1. Create a manifest file called package.json, using `npm init`
// This file is used as a manifest, storing information about applications, modules, packages, and more.

// 2. create your entry point file - `index.js` using `touch index.js`

// 3. Setup a node built-in server and create a node server object.
// const http = require('http');

//create a server object:
http.createServer(function (req, res) {
  res.write('Hello World!'); //write a response to the client
  res.end(); //end the response
}).listen(8080, () => console.log("Server is running")); //the server object listens on port 8080

// Run the the http server using `node index.js`

// 4. Since the NodeJS http module is limited, we switch to the express framework.
// install express using `npm install express`

// Comment out the previous codes and Add the code below to your index.js file
// const express = require('express')
const app = express()
const port = 3000

app.get('/', (req, res) => {
  res.send('Hello World!')
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})


// 5. Add different routes to your application 
//
app.get('/russia', (req, res) => {
  res.send('Hello Russia')
})
app.get('/', (req, res) => {
  res.send('Hello World!')
})
app.get('/ukraine', (req, res) => {
  res.send('Hello Ukraine!')
})

// Note: Anytime You make changes to the index.js file, you need to restart
// the application again, to effect the new changes.

// 6. To stop this act of always restarting when changes are made, we install `nodemon`
// install nodemon using `npm install nodemon -D`


// 7. After installation, you add the dev script to the package.json file
// "scripts": {
    "httpServer": "node index.js",
    "expressServer": "node index.js",
    "dev": "nodemon index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  }, 

  // You start running your server using `nodemon`. Using the new script
  // we added to the package.json file
  // `npm run dev`

  // [nodemon] restarting due to changes...

  // app.anyHTTPMethod(path, callbackFunction)

  // 8. Due to the excess codes in the index.js file, we abstract other functionalities to
  // other folders - SETTING UP THE ROUTES.
  // create a folder called `Routes` in the root directory.
  // inside the `Routes` folder, create a file called `pagesRoutes.js`

// 10. Abstract the routing to a diffrent file OR folder.
  // move all the pages routing to the `pagesRoutes` file and rename the `app.` to `router.`
  // const express = require("express");
const router = express.Router();

router.get('/russia', (req, res) => {
    res.send('Hello Russia')
  })
  
  // sending a html file as a response to the client
  router.get('/', (req, res) => {
    res.sendFile(__dirname + "/index.html")
  })
  
  router.get('/ukraine', (req, res) => {
    res.send(`
          <body>
              <h1>Hello, dear user</h1>
              <p>Welcome to our webpage</p>
          </body>
    `)
  })
  router.get('/home', (req, res) => {
    res.json("HOME PAGE")
  })

module.exports = router;


// After doing the above, add the express middleware `app.use` to your index.js file
const pagesRoutes = require("./Routes/pagesRoutes"); // importing the `pagesRoutes` to the `index.js file`

// // app.use(path, requestHandlers)
app.use("/", pagesRoutes);  //adding the express middleware


// 11. CREATING API ROUTES
// What is an API (Application Programming Interface)? This is a contract that defines OR specifies how 
// two devices can communicate with each other using requests and responses.

// APIs are used in web applications to connect User-Interface i.e the FRONTENDS with critical
// backend functionality and data.

// 11-(a) create a SCHEMA and a MODEL using mongoose
// A Mongoose model is a wrapper on the Mongoose schema. A Mongoose schema defines the structure of the document, default values, validators, etc., whereas a Mongoose model provides an interface to the database for creating, querying, updating, deleting records, etc.

// const mongoose = require("mongoose");

const blogSchema = mongoose.Schema({
    title: {type: String, required: [true, "title is required"], unique},
    body: {type: String, required: [true, "body is required"]},
    date: {type: Date, default: Date.now()},
    image_url: {type: String},
    author: {type: String, required: [true, "author is required"]},
    hidden: {type: Boolean}
}, {
  timestamps: true,

});

module.exports = mongoose.model("Blog", blogSchema);


// 11- (b) - Set up your MongoDB database and connect it to your node application.
// create an ".env" file in our root directory. To store our environment variables.

// install the dotenv package
// npm install dotenv
// And import dotenv package into your application, by pasting the code below
// into your server file. 
//    require("dotenv").config();

// Add your MongoDB connection URL/Link to the .env file.
// 12. Create your MongoDB connection to your server.
// 12-(a) create a folder in the root directory called "Database" and create a file inside the folder
// called "connectDB.js"
// paste the following code below in the "connectDB.js" file
const mongoose = require("mongoose");

mongoose.set("strictQuery", false);

// connect to mongoDB Database
mongoose.connect(process.env.MONGOBD_URL, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  })
  .then(() => {
    console.log("Now connected to MongoDB!")
  })
  .catch((error) => {
    console.log(error)
})


// NOW CONNECTED TO MongoDB
      Example app listening on port 3000
      Now connected to MongoDB!

  
// 13. CREATE THE API ROUTES
    // 13-(a) creating a file called "apiBlogRoutes.js" in the Routes folder.
    // 13-(b) we create the API routing path in the server file, using the "app.use" middleware
    // import the "api route" file into the top of the server file, using the code below:
    const apiBlogRoutes = require("./Routes/apiBlogRoutes");

    // Make use of the apiRoute variable, in the api routing- "app.use" middleware
    app.use("/api/blogs", apiBlogRoutes);